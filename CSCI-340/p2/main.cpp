/***********************************************************
 CSCI 340 - Program 2 - Fall 2018
 
 Name:      Ryan Rickgauer
 Z-ID:      z1729300
 Section:   3
 Date Due:  September 4, 2018
 
 Purpose:   This program implements two search algorithms (a
            linear search & binary search) on randomly generated
            integers stored in vectors.
 ************************************************************/
#include "prog2.h"

using namespace std;

/***************************************************************
 Function: Vectors
 
 Parameters: 2 vector references. 2 int
 
 Returns: void
 
 Notes: Fills the elements of vectors v1 of size ARR_SIZE = 200
 and v2 of size TEST_ARR_SIZE = 100 with random numbers,
 generated by two sets of pseudo-random numbers with the seed
 values s1 and s2.
 ***************************************************************/
void Vectors(vector<int> &v1, vector<int> &v2, int s1, int s2)
{
    v1.resize(0);
    v2.resize(0);

    // Fill v1
    srand(s1);
    for (int count = 0; count < ARR_SIZE; count++)
        v1.push_back(rand() % (HIGH - LOW + 1) + LOW);
    
    
    // Fill v2
    srand(s2);
    for(int count = 0; count < TEST_ARR_SIZE; count++)
        v2.push_back(rand() % (HIGH - LOW + 1) + LOW);
    
}

/***************************************************************
 Function: linearSearch
 
 Parameters: 1 vector reference. 1 int
 
 Returns: bool
 
 Notes: Returns the value of find(), which tests to see if int x
 is within the vector v. If the int is found, return true,
 otherwise return false.
 ***************************************************************/
bool linearSearch(const vector<int> &v, int x)
{
    if (find(v.begin(), v.end(), x) != v.end())
        return true;
    else
        return false;
}


/***************************************************************
 Function: binarySearch
 
 Parameters: 1 vector reference. 1 int
 
 Returns: bool
 
 Notes: Returns the value of binary_search(), which tests to see if int x
 is within the vector v. If the int is found, return true,
 otherwise return false.
 ***************************************************************/
bool binarySearch(const vector<int> &v, int x)
{
    return binary_search(v.begin(), v.end(), x);
}


/***************************************************************
 Function: search
 
 Parameters: 2 const vector references. 1 pointer to a function
 
 Returns: int
 
 Notes: Takes a pointer to the search routine p ( ), and then it
 calls p ( ) for each element of vector v2 in vector v1. It
 computes & returns the total number of successful searches
 ***************************************************************/
int search(const vector<int> &v1, const vector<int> &v2, bool(*p)(const vector <int> &v, int n))
{
    
    int numberOfMatches = 0;    // Number of found matches
    int number;                 // Number to be searched for in v1
    
    // Loop through v2 to see if items in v1 are included
    for (unsigned count = 0; count < TEST_ARR_SIZE; count++)
    {
        number = v2.at(count);
        
        // If the current element being searched for is found,
        // Add 1 to numberOfMatches
        if (p(v1, number) == true)
            numberOfMatches++;
    }
    
    return numberOfMatches;
}

/***************************************************************
 Function: sortVector
 
 Parameters: 1 reference to a vector
 
 Returns: void
 
 Notes: Sorts the elements of vector v in ascending order by
 calling the sort() function in the STL.
 ***************************************************************/
void sortVector(vector<int> &v)
{
    sort(v.begin(), v.end());
}

/***************************************************************
 Function: printVector
 
 Parameters: 1 reference to a vector const
 
 Returns: void
 
 Notes: Prints the contents of vector v on stdout.
 ***************************************************************/
void printVector(const vector<int> &v)
{
    int size = (int)v.size();
    
    // Prints the elements in rows of 16 with setw(4)
    for (int count = 0; count < size; count++)
    {
        if (count % NO_ITEMS == 0 && count != 0)
            cout << endl;
        
        cout << setw(ITEM_W) << v.at(count);
    }
    
    cout << endl;   // Line break
}

/***************************************************************
 Function: printStat
 
 Parameters: 2 int
 
 Returns: void
 
 Notes: Prints the percent of successful searches as right-aligned,
 floating-point numbers on stdout, where totalSucCnt is the total
 number of successful comparisons and vectorSz is the size of
 the test vector.
 ***************************************************************/
void printStat(int totalSucCnt, int vectorSz)
{
    // Calculates the correct percentage
    double percentage = (totalSucCnt * 100) / vectorSz;
    
    // Prints out the percentage calculated
    cout << right << "\t\t\tPercent of Successful Searches = " << fixed << setprecision(2) << percentage << "%" << endl;
}
